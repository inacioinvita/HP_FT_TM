#!/bin/bash



#SBATCH -p compute
#SBATCH -J t_llam
#SBATCH --cpus-per-task=4
#SBATCH --mem=200000
#SBATCH --nodelist=g128
#SBATCH -t 8:00:00
#SBATCH --gres=gpu:a100:4

# 1) Initialize Conda
eval "$(/home/ivieira/mambaforge/bin/conda shell.bash hook)"

# 2) Remove and recreate environment
echo "=== Creating fresh conda environment ==="
conda deactivate
conda env remove -n my-pip-env --yes
conda create -n my-pip-env python=3.8 -y
conda activate my-pip-env
echo "=== Fresh environment created ==="

# 3) Set CUDA environment variables
export CUDA_HOME=/usr/local/cuda-12.5
export LD_LIBRARY_PATH=$CUDA_HOME/lib64:$LD_LIBRARY_PATH
export PATH=$CUDA_HOME/bin:$PATH

# 4) Move to project directory
cd ~/chicago2/HP_FT_TM

# 5) Set GPU devices from SLURM
export CUDA_VISIBLE_DEVICES=$SLURM_STEP_GPUS

# 6) Clean previous installations
python -m pip uninstall -y torch torchvision torchaudio bitsandbytes
rm -rf ~/.local/lib/python3.8/site-packages/bitsandbytes*

# 1) Clean the environment thoroughly
echo "=== Cleaning environment ==="
python -m pip uninstall -y torch torchvision torchaudio triton torchtriton
conda uninstall -y --force pytorch torchvision torchaudio pytorch-cuda cuda-toolkit triton torchtriton
rm -rf ~/.local/lib/python3.8/site-packages/triton*
rm -rf ~/.local/lib/python3.8/site-packages/torch*
echo "=== Environment cleaned ==="

# 2) Install PyTorch with CUDA 12.1 using pip
echo "=== Installing PyTorch with CUDA support ==="
python -m pip install --no-cache-dir torch --index-url https://download.pytorch.org/whl/cu121

# 3) Verify installation with proper error handling
echo "=== Verifying PyTorch CUDA Installation ==="
if python -c "
import torch
print('PyTorch version:', torch.__version__)
print('CUDA available:', torch.cuda.is_available())
print('CUDA version:', torch.version.cuda)
if not torch.cuda.is_available():
    raise RuntimeError('CUDA not available')
"; then
    echo "PyTorch CUDA installation successful!"
else
    echo "PyTorch CUDA installation failed, cleaning and trying conda..."
    python -m pip uninstall -y torch torchvision torchaudio triton torchtriton
    conda install -y pytorch torchvision torchaudio pytorch-cuda=11.8 -c pytorch -c nvidia --force-reinstall
fi

# 4) Final verification
python -c "import torch; assert torch.cuda.is_available(), 'PyTorch CUDA still not available'" || exit 1

# 8) Install BitsAndBytes with CUDA 12.5 support from the multi-backend branch
echo "=== Installing BitsAndBytes from Multi-backend Branch ==="
python -m pip install --no-cache-dir --upgrade \
    "bitsandbytes@https://github.com/bitsandbytes-foundation/bitsandbytes/archive/refs/heads/main.zip"
echo "=========================================="

# 9) Verify BitsAndBytes CUDA support
echo "=== Verifying BitsAndBytes Installation ==="
python -c "
import bitsandbytes as bnb
try:
    print('BNB CUDA:', bnb.COMPILED_WITH_CUDA)
except AttributeError:
    print('BNB is not compiled with CUDA support.')
"
echo "=========================================="

# Exit if BitsAndBytes was not compiled with CUDA
python -c "
import bitsandbytes as bnb
import sys
try:
    assert bnb.COMPILED_WITH_CUDA, 'BitsAndBytes was not compiled with CUDA support.'
except AssertionError as e:
    print(e)
    sys.exit(1)
"
echo "BitsAndBytes is compiled with CUDA support."
echo "=========================================="

# 10) Install remaining packages
python -m pip install --no-cache-dir \
    ctranslate2==4.3.1 \
    "transformers>=4.38.0" \
    "trl>=0.7.6" \
    huggingface_hub \
    accelerate \
    sentencepiece \
    sacrebleu \
    pandas \
    comet \
    unbabel-comet \
    polars \
    mlflow \
    peft \
    datasets \
    safetensors

# 11) Run the trainer
python BALS_trainer.py


