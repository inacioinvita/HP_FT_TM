#!/bin/bash

#SBATCH -p compute
#SBATCH -J LF_L_3.1_8B
#SBATCH --cpus-per-task=4
#SBATCH --mem=200000
#SBATCH --gres=gpu:a100:1
#SBATCH -t 8:00:00
#SBATCH -o LF_%j.out
#SBATCH -e LF_%j.err

# Initialize conda
eval "$($HOME/miniconda3/bin/conda shell.bash hook)"

# Create and activate environment
# conda create -n lf-env2 python=3.11 -y
conda activate lf-env

# Only install the following packages once on the environment
# Install CUDA-enabled PyTorch first
# conda install -y pytorch torchvision torchaudio pytorch-cuda=11.8 -c pytorch -c nvidia

# Install bitsandbytes with CUDA support
# pip install bitsandbytes==0.43.1 --prefer-binary
# pip install wandb
# pip install liger-kernel>=0.3.0

# Clone and setup LLaMA Factory ONLY on the first run
cd ~ || exit 1
# rm -rf LLaMA-Factory
# git clone --depth 1 https://github.com/hiyouga/LLaMA-Factory.git
cd LLaMA-Factory

# Only install requirements once on the environment
# pip install -r requirements.txt
# pip install -e .[torch,bitsandbytes]

# Quick GPU check
python -c "import torch; print('CUDA available?', torch.cuda.is_available()); print('Device count:', torch.cuda.device_count());"

# Create training config
cat <<EOF > train_llama3.json
{
  "stage": "sft",
  "do_train": true,
  "model_name_or_path": "meta-llama/Meta-Llama-3.1-8B-Instruct",
  "dataset": "BALS_de_train_dataset",
  "dataset_dir": "data",
  "template": "llama3",
  "finetuning_type": "lora",
  "lora_target": "all",
  "output_dir": "saves/Llama-3.1-8B-Instruct/lora/train_$(date +%Y-%m-%d-%H-%M-%S)",
  "bf16": true,
  "cutoff_len": 1024,
  "ddp_timeout": 180000000,
  "eval_steps": 100,
  "eval_strategy": "steps",
  "flash_attn": "auto",
  "gradient_accumulation_steps": 8,
  "learning_rate": 0.001,
  "logging_steps": 10,
  "lora_alpha": 16,
  "lora_dropout": 0.1,
  "lora_rank": 128,
  "lr_scheduler_type": "polynomial",
  "max_grad_norm": 1.0,
  "max_samples": 100000,
  "num_train_epochs": 1.0,
  "optim": "adamw_torch",
  "packing": false,
  "per_device_eval_batch_size": 8,
  "per_device_train_batch_size": 32,
  "plot_loss": true,
  "preprocessing_num_workers": 16,
  "quantization_bit": 8,
  "quantization_method": "bitsandbytes",
  "report_to": "wandb",
  "run_name": "train_$(date +%Y-%m-%d-%H-%M-%S)",
  "save_steps": 10,
  "trust_remote_code": true,
  "upcast_layernorm": true,
  "val_size": 0.1,
  "warmup_steps": 50
}
EOF

# ⚠️ IMPORTANT: Make sure ~/.huggingface_token exists and contains your HF token
# Format: export HUGGINGFACEHUB_API_TOKEN='your_token_here'
if [ ! -f ~/.huggingface_token ]; then
    echo "Error: ~/.huggingface_token not found!"
    echo "Please create it with: echo \"export HUGGINGFACEHUB_API_TOKEN='your_token'\" > ~/.huggingface_token"
    exit 1
fi

# Load HuggingFace token
source ~/.huggingface_token

# Load WANDB token
if [ ! -f ~/.wandb_token ]; then
    echo "Error: ~/.wandb_token not found!"
    echo "Please create it with: echo \"export WANDB_API_KEY='your_token'\" > ~/.wandb_token"
    exit 1
fi

# Source the token
source ~/.wandb_token

# Run training
llamafactory-cli train train_llama3.json 

# After training completes, print paths
echo "----------------------------------------"
echo "Model and checkpoint locations:"
echo "Base directory: $HOME/LLaMA-Factory/"
echo "Model save path: $HOME/LLaMA-Factory/saves/Llama-3.1-8B-Instruct/lora/train_$(date +%Y-%m-%d-%H-%M-%S)"
echo "Checkpoint directory: $HOME/LLaMA-Factory/saves/Llama-3.1-8B-Instruct/lora/train_$(date +%Y-%m-%d-%H-%M-%S)/checkpoint-*"
echo "----------------------------------------" 