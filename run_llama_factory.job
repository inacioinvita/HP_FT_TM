#!/bin/bash

#SBATCH -p compute
#SBATCH -J LF_L_3.1_8B
#SBATCH --cpus-per-task=4
#SBATCH --mem=200000
#SBATCH --gres=gpu:a100:1
#SBATCH -t 12:00:00
#SBATCH -o LF_%j.out
#SBATCH -e LF_%j.err

# ============= CONFIGURATION =============
# Set to "true" to skip training and run inference+eval on existing model
# Set to "false" to run full train+infer+eval pipeline
SKIP_TRAIN="false"
# Set to "true" to skip inference and run eval on existing predictions only
# Set to "false" to run inference+eval
SKIP_INFERENCE="false"
# Timestamp of existing model/predictions when skipping
OLD_TRAIN_TIMESTAMP="2025-01-17-17-56-34"
# 2025-01-17-09-43-52
# baseline
# =======================================

# Initialize conda
eval "$($HOME/miniconda3/bin/conda shell.bash hook)"

# Create and activate environment
# conda create -n lf-env python=3.11 -y
conda activate lf-env

# Only install the following packages once on the environment
# Install CUDA-enabled PyTorch first
# conda install -y pytorch torchvision torchaudio pytorch-cuda=11.8 -c pytorch -c nvidia

# Install bitsandbytes with CUDA support
# pip install bitsandbytes==0.43.1 --prefer-binary
# pip install wandb
# pip install liger-kernel>=0.3.0
# pip install sacrebleu unbabel-comet

# Clone and setup LLaMA Factory ONLY on the first run
cd ~ || exit 1
# rm -rf LLaMA-Factory
# git clone --depth 1 https://github.com/hiyouga/LLaMA-Factory.git
cd LLaMA-Factory

# Only install requirements once on the environment
# pip install -r requirements.txt
# pip install -e .[torch,bitsandbytes,metrics]


# Quick GPU check
python -c "import torch; print('CUDA available?', torch.cuda.is_available()); print('Device count:', torch.cuda.device_count());"

# Set timestamp once at the beginning
export TIMESTAMP=$(date +%Y-%m-%d-%H-%M-%S)
MODEL_PATH="saves/Llama-3.1-8B-Instruct/lora/train_${TIMESTAMP}"

# Create training config with variable
cat <<EOF > train_llama3.json
{
  "stage": "sft",
  "do_train": true,
  "model_name_or_path": "meta-llama/Meta-Llama-3.1-8B-Instruct",
  "dataset": "BALS_de_train_dataset",
  "dataset_dir": "data",
  "template": "llama3",
  "finetuning_type": "lora",
  "lora_target": "all",
  "output_dir": "saves/Llama-3.1-8B-Instruct/lora/train_${TIMESTAMP}",
  "bf16": true,
  "cutoff_len": 1024,
  "ddp_timeout": 180000000,
  "eval_steps": 10,
  "eval_strategy": "steps",
  "flash_attn": "auto",
  "gradient_accumulation_steps": 8,
  "learning_rate": 0.001,
  "logging_steps": 25,
  "lora_alpha": 16,
  "lora_dropout": 0.1,
  "lora_rank": 64,
  "lr_scheduler_type": "polynomial",
  "max_grad_norm": 0.5,
  "max_samples": 100000,
  "num_train_epochs": 1,
  "optim": "adamw_torch",
  "packing": false,
  "per_device_eval_batch_size": 8,
  "per_device_train_batch_size": 32,
  "plot_loss": true,
  "preprocessing_num_workers": 16,
  "quantization_bit": 4,
  "quantization_method": "bitsandbytes",
  "report_to": "wandb",
  "run_name": "train_${TIMESTAMP}",
  "save_steps": 25,
  "trust_remote_code": true, 
  "upcast_layernorm": true,
  "val_size": 0.1,
  "warmup_ratio": 0.05,
  "weight_decay": 0.01
}
EOF

# upcast_layernorm:  Whether or not to upcast the layernorm weights in fp32 (remove when 4bit quantization is used)
#   // "use_unsloth": true,
#   // "flash_attn": fa2,
#   // "enable_liger_kernel": true

# Load all API keys
if [ ! -f ~/.api_keys ]; then
    echo "Error: ~/.api_keys not found!"
    echo "Check run_llama_factory.job for API keys loading - ~/.wandb_token and ~/.huggingface_token"
    exit 1
fi
# Source the API keys
source ~/.api_keys

cd ~/LLaMA-Factory || exit 1

if [ "$SKIP_TRAIN" = "false" ]; then
    echo "Running full pipeline: train + inference + evaluation"
    llamafactory-cli train train_llama3.json
else
    echo "Using timestamp from existing run: ${OLD_TRAIN_TIMESTAMP}"
    TIMESTAMP=$OLD_TRAIN_TIMESTAMP
fi

if [ "$SKIP_INFERENCE" = "false" ]; then
    echo "Running inference..."
    python scripts/vllm_infer.py \
        --model_name_or_path "meta-llama/Meta-Llama-3.1-8B-Instruct" \
        --adapter_name_or_path "/home/ivieira/LLaMA-Factory/saves/Llama-3.1-8B-Instruct/lora/train_${TIMESTAMP}" \
        --dataset BALS_de_test_dataset \
        --dataset_dir "data" \
        --template llama3 \
        --temperature 1.0 \
        --top_p 1.0 \
        --vllm_config '{"enable_lora": true, "max_lora_rank": 64, "max_loras": 1}' \
        --save_name "/home/ivieira/LLaMA-Factory/saves/Llama-3.1-8B-Instruct/lora/train_${TIMESTAMP}/predictions_${TIMESTAMP}.json"
fi

# Run evaluation
echo "Running evaluation..."
python ~/chicago2/HP_FT_TM/inference_eval.py \
    --predictions_file "/home/ivieira/LLaMA-Factory/saves/Llama-3.1-8B-Instruct/lora/train_${TIMESTAMP}/predictions_${TIMESTAMP}.json"

echo "----------------------------------------"
echo "Pipeline completed with settings:"
echo "SKIP_TRAIN: ${SKIP_TRAIN}"
echo "SKIP_INFERENCE: ${SKIP_INFERENCE}"
echo "TIMESTAMP: ${TIMESTAMP}"
echo "Predictions path: /home/ivieira/LLaMA-Factory/saves/Llama-3.1-8B-Instruct/lora/train_${TIMESTAMP}/predictions_${TIMESTAMP}.json"
echo "----------------------------------------"

# Print config files for reproducibility
echo "----------------------------------------"
echo "Config files used:"
echo "Training config:"
cat train_llama3.json
echo "----------------------------------------"
